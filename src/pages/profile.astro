---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <main class="container max-w-md mx-auto p-4">
    <h2 class="text-3xl font-bold tracking-tight mb-6 text-center">
      Your Profile
    </h2>

    <!-- Profile Card -->
    <div class="bg-white p-6 rounded-lg shadow-md mb-8">
      <div id="profile-loading" class="py-8 flex justify-center">
        <div class="flex items-center justify-center space-x-2">
          <div class="w-4 h-4 bg-indigo-600 rounded-full animate-pulse"></div>
          <div class="w-4 h-4 bg-indigo-600 rounded-full animate-pulse delay-75"></div>
          <div class="w-4 h-4 bg-indigo-600 rounded-full animate-pulse delay-150"></div>
        </div>
      </div>

      <div id="profile-content" class="hidden">
        <div class="mb-6 text-center">
          <div class="w-20 h-20 bg-indigo-100 rounded-full mx-auto flex items-center justify-center">
            <svg class="w-10 h-10 text-indigo-500" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <h3 id="user-email" class="mt-4 text-lg font-medium"></h3>
        </div>

        <div class="border-t pt-4">
          <div class="flex justify-between items-center mb-4">
            <span class="text-gray-600">User ID:</span>
            <span id="user-id" class="text-gray-900 font-medium"></span>
          </div>
          <div class="flex justify-between items-center mb-4">
            <span class="text-gray-600">Email verified:</span>
            <span id="email-verified" class="text-gray-900 font-medium"></span>
          </div>
          <div class="flex justify-between items-center">
            <span class="text-gray-600">Last sign in:</span>
            <span id="last-sign-in" class="text-gray-900 font-medium"></span>
          </div>
        </div>

        <div class="mt-6">
          <button
            id="logout-button"
            class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
          >
            Sign Out
          </button>
        </div>
      </div>

      <div id="not-authenticated" class="hidden py-8 text-center">
        <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
        </svg>
        <h3 class="text-lg font-medium text-gray-900 mb-2">Not Logged In</h3>
        <p class="text-gray-600 mb-4">Please log in to view your profile</p>
        <a
          href="/login"
          class="inline-block bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
        >
          Go to Login
        </a>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from '../lib/supabase.js';

  document.addEventListener('DOMContentLoaded', async () => {
    const profileLoading = document.getElementById('profile-loading');
    const profileContent = document.getElementById('profile-content');
    const notAuthenticated = document.getElementById('not-authenticated');
    const userEmail = document.getElementById('user-email');
    const userId = document.getElementById('user-id');
    const emailVerified = document.getElementById('email-verified');
    const lastSignIn = document.getElementById('last-sign-in');
    const logoutButton = document.getElementById('logout-button');

    // Format date helper function
    const formatDate = (dateString: string) => {
      if (!dateString) return 'N/A';
      const date = new Date(dateString);
      return date.toLocaleString();
    };

    // Check if user is authenticated and load profile data
    const loadProfile = async () => {
      try {
        // Get current session
        const { data: { session } } = await supabase.auth.getSession();

        // Hide loading indicator
        if (profileLoading) profileLoading.classList.add('hidden');

        if (session && session.user) {
          // User is authenticated, show profile
          if (profileContent) profileContent.classList.remove('hidden');
          
          // Populate user data
          if (userEmail) userEmail.textContent = session.user.email || '';
          if (userId) userId.textContent = session.user.id.substring(0, 8) + '...';
          if (emailVerified) emailVerified.textContent = session.user.email_confirmed_at ? 'Yes' : 'No';
          if (lastSignIn) lastSignIn.textContent = formatDate(session.user.last_sign_in_at || '');
        } else {
          // User is not authenticated, show login prompt
          if (notAuthenticated) notAuthenticated.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Error loading profile:', error);
        // Show not authenticated view on error
        if (profileLoading) profileLoading.classList.add('hidden');
        if (notAuthenticated) notAuthenticated.classList.remove('hidden');
      }
    };

    // Add logout functionality
    if (logoutButton) {
      logoutButton.addEventListener('click', async () => {
        await supabase.auth.signOut();
        window.location.href = '/';
      });
    }

    // Load profile on page load
    loadProfile();
  });
</script>
